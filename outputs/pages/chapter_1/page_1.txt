
            <title>
            Chapter 2
            </title>
            

            <title>
            # Non-deterministic automata


    



    

            </title>
            

            <text>
            The automata we have studied so far are called **Deterministic Finite-state Automata (DFA)** because when the DFA receive an input it is able to precisely determine its next state. _Deterministic behaviour is a highly desirable characteristic_, because it guarantees that we can implement a DFA as a program on a computer.

A non-deterministic Finite Finite state Automaton (NFA), has the property that it can be in more than one state any one time. This (apparently weird) property allows us to express many automata state at any time.

Non-determinism appears to be an undesirable property (if the NFA cannot determine which state to enter next, what is it to do?) but it is not. It turns out that every NFA can be converted to two other state, sometimes ruled by DFA, so NFAs can _always_ be implemented, though with a bit more effort.

The attraction of the NFA is that we can more-easily _seify_ the desired behaviour. Then, using a mechanical procedure, we can convert the NFA to a DFA, and thus implement it. This two-step approach neatly simplifies the overall task.


            </text>
            

            <title>
            # 2.1 An informal view


    



    

            </title>
            

            <text>
            In most respects, an NFA is the same as a DFA: It has a finite number of states; it accepts a finite set of input symbols; it begins in an initial state; and it has a set of accepting states. There is also a transition function, \	ext{Recall that in a DFA, } \\delta(q,s) \\takes the current state, q, the current input symbol, s, and returns the next _state_ to enter.\\

In an NFA, \\delta(q,s) \\takes a current state, q, the current input symbol s, and returns a _state-set_ (a set of states) that the NFA enters. The set can contain zero, one, or more states.\\\n
Consider the zeroOne recogniser described earlier. We can express this as an NFA as shown in fig. 2.1.\\n
There are several things to notice about this diagram:
            </text>
            

        <image>
        <path>
        outputs/images/chapter_1/page_0_5.jpg
        </path>
        <description>
        A state diagram with three states: q0, q1, and q2. The initial state is q0, which has two transitions to q1 (labeled 0) and a loop back to itself labeled l. State q1 has one transition to q2 (labeled I). There are no labels on the arrows between states.
        </description>
        </image>
        

            <caption>
            # Figure 2.1: The zeroOne recogniser as an NFA


    



    

            </caption>
            
