
            <title>
            # 2.4   The string transition function for an NFA.

2.4 The string transition function for an NFA
            </title>
            

            <text>
            The extended transition function, Δ allows us to specify how an NFA in state-set Q will move to state-set R upon receipt of a symbol s. We show this by writing R = Δ(Q, s).
            </text>
            

            <text>
            We are interested in knowing what state-set an NFA will reach, starting at Q₀, if it is presented with a string of symbols w = s₁s₂s₃⋯sₙ.
            </text>
            

            <text>
            We can specify Δ̃, the string transition function, that takes a current state-set P, and a string of input symbols w = s₁s₂s₃⋯sₙ, and generates the state-set R that the NFA will reach after processing those symbols: R = Δ̃(P, w), like this:

We can specify A, the string transition function, that takes a current state-set P, and a string of input symbols w = s₁s₂s₃⋯sₙ, and generates the state-set R that the NFA will reach after processing those symbols: R = A(P, w), like this:
            </text>
            

            <formula>
            Δ: {0}×Σ^*→{0}
            </formula>
            

            <text>
            Note that Q is a _set of sets of states_ — the set of all subsets that can be created by selecting states from Q.

(Note that @Q is a set of sets of states — the set of all subsets that can be created by selecting states from Q.)
            </text>
            

            <text>
            # We can define Δ̂ recursively, like this:

We can define A recursively, like this:
            </text>
            

            <text>
            Base case
If there is no input, the NFA stays in the current state-set, P. Thus the rule is:


            </text>
            

            <formula>
            Δ̂(P, ϵ) = P
            </formula>
            

            <text>
            **Recurrence case**] If we are given a string of symbols s₁s₂s₃⋯sₙ, we "chop" the first symbol s₁ from the string, and use Δ to compute the state-set, T, that would be reached, starting at each state p in P:

Recurrence case | If we are given a string of symbols s₁s₂s₃⋯sₙ, we “chop” the first symbol s₁ from the string, and use A to compute the state-set, T, that would be reached, starting at each state p in P:
            </text>
            

            <formula>
            
    T = Δ(P, s_1)

            </formula>
            

            <text>
            We then use the Δ̂ function to process the remainder of the string, starting at T: Δ̂(T,⊗₂⊗₃⋯⊗ₙ). Combining the pieces, we get:

We then use the A function to process the remainder of the string, starting at T: A(T, s₂₈₃—Sₙ).
Combining the pieces, we get:
            </text>
            

            <formula>
            Δ̂(P, s_1 s_2 s_3⋯ s_n) = Δ̂(Δ(P, s_1)), s_2 s_3⋯ s_n)
            </formula>
            

            <text>
            We can see that a recursive evaluation according to these rules must terminate in a finite number of steps, because each recursive invocation of δ̂ occurs with a shorter string of symbols. Eventually, we will reach the base case: Δ̂(R, ϵ).
            </text>
            

            <title>
            # 2.5   The language of an NFA

2.5 The language of an NFA
            </title>
            

            <text>
            We can define the language of an NFA in a very similar way to a DFA. The language is the set of all input strings that take the NFA from its initial state to an accepting state. Thus, for the NFA JN, defined by:


            </text>
            

            <formula>
            
    N=(Q,Σ,δ,Q_0,F)

            </formula>
            

            <text>
            # The language L(N) of this NFA is defined by:

The language L(V) of this NFA is defined by:
            </text>
            

            <formula>
            
    L(N)={w∈Σ^*|Δ̂(Q_0,w)∩ F≠∅}

            </formula>
            

            <text>
            Note that we must define the acceptance test slightly differently from a DFA. In a DFA, the δ̂ function returns a single state, and we check to see if that state is in F. For an NFA, Δ̂ returns a set of states. If one or more of those states is in F, then the NFA is in an accepting state. We express this condition by computing the intersection between the result of Δ̂ and F, Δ̂(⋯)∩ F. If the intersection is _non-null_, we know that the NFA has reached an accepting state.

Note that we must define the acceptance test slightly differently from a DFA. In a DFA, the 6 function returns a single state, and we check to see if that state is in F'. For an NFA, A returns a set of states. If one or more of those states is in F”, then the NFA is in an accepting state. We express this condition by computing the intersection between the result of A and F, A(—) A F. If the intersection is non-null, we know that the NFA has reached an accepting state.
            </text>
            
