<h1>Chapter 0</h1><p>Most of your programming experience will have been acquired by writing conventional data-processing style programs that read data, process it, and generate output. Programs that simply read and write files are among the oldest uses of computers, and are known as batch programs – the program runs, computes and, when it is finished, the result is available.</p><h2>Interactive Programs</h2><p>If the program interacts with a user, and asks for data as it is needed for the computation, it is called an _interactive_ program. Interactive programs were the next stage in the evolution of computers and software. You have probably written many interactive programs during your coursework so far.</p><h2>Reactive Programs</h2><p>However, many programs in the real world need to be able to process data as it arrives at the system. These programs are called _reactive_ or _event-driven_ because they need to be able to react to the data as soon as it arrives.</p><h2>Example of Reactive Programs</h2><p>A familiar example of a reactive program is any program with a Graphical User Interface (GUI). Such a program does not wait for a specific button to be pressed, but is instead ready to respond to _any_ button that is pressed.</p><h2>Embedded Systems</h2><p>Another application of reactive programs is embedded systems. These are systems that control electrical appliances such as DVD players, air conditioners, toasters, mobile phones, burglar alarms, car fuel injection systems, and many others. More than 99% of the world's population lives in a home or office where an embedded system controls some aspect of their environment.</p><h2>Characteristics of Reactive Programs</h2><h3>1. Driven by Data Availability</h3><p>Reactive programs have three main characteristics:</p><p>Reactive programs have three main characteristics:</p><p>* They are driven by the availability of data. When a particular piece of data becomes available for processing, we say that an event occurs (hence event-driven programs). From a software viewpoint, the order in which events can occur is unpredictable — e.g., a DVD player cannot predict which button a user will press next. This means that the number of execution paths in a reactive program is much larger than in an interactive program. This fact alone makes writing correct code much more difficult (we have all experienced GUI programs that crash for no obvious reason).</p><h3>2. Concurrent Execution</h3><p>* They are concurrent. Reactive systems are usually carrying out multiple activities at the same time. For example, a single web browser process can have multiple windows opened where a different download is in progress in each window. While doing this, the browser still responds to user mouse-clicks and key-strokes. From the viewpoint of the web browser, the arrival of data for each web-page or of a mouse-click is simply an event that can occur at any time.</p><h3>3. User Control</h3><p>* _The user is always in control._ While the program is processing data, it cannot choose to ignore the user, rather it must respond to the user's events (mouse-clicks, or key-strokes) in a timely fashion.</p><h2>Math</h2><p>e The user is always in control. While the program is processing data, it cannot choose to ignore the user, rather it must respond to the user’s events (mouse-clicks, or key-strokes) in a timely fashion.</p>
