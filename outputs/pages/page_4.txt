
                <title>
                # 0.3.1 Some nomenclature

0.3.1 Some nomenclature
                </title>
                

                <text>
                A finite state machine has one or more _states_, represented on a state-diagram as circles. As a result of an external _event_, the FSM can make a _transition_ from one state to another (possibly the same) state. A transition is represented on the diagram as a directed arc, labelled with the name of the event that causes the transition to be taken. The FSM has an _initial state_, represented on the diagram by a lightning-strike. The _current state_ is represented by a large dot inside the state.


    eginalign* A 	ext finite state machine    	exthas one or more states, represented on a state-diagram as circles.    	extAs a result of an external event, the FSM can make a transition from one state to another (possibly the same) state.    	extA transition is represented on the diagram as a directed arc, labelled with the name of the event that causes the transition to be taken.    	extThe FSM has an initial state, represented on the diagram by a lightning-strike.    	extThe current state is represented by a large dot inside the state.	ext**Math Representation:**
     A_FSM = (Q, 	au, ho, q_0) 
     Q    = 	extSet of states
     	au    = 	extAlphabet of events
     ho: Q 	imes 	au    ightarrow Q 
     q_0    	ext is the initial state.
    	ext**Explanation:**
     A finite state machine (FSM) consists of a finite set of states, an alphabet of input symbols, a transition function that defines how the FSM moves from one state to another based on input events, and an initial state from which the FSM starts processing inputs.
    	ext**Example:**
     Consider an FSM with two states: State A and State B. The alphabet consists of two events: Event X and Event Y. The transition function is defined as follows:
     - From State A on receiving Event X, move to State B.
     - From State B on receiving Event Y, return to State A.
    	extThis setup allows the FSM to process inputs in a deterministic manner, transitioning between states based on the input events received.

                </text>
                

                <title>
                # 0.4 Another example - text recognition


    0.4 Another example - text recognition

                </title>
                

                <text>
                We consider here another example, that arises in text-processing programs, such as a compiler. Suppose we wish to recognise the words “for”, and “float”, in a stream of text. We could construct a finite state machine, where the sequence of events is the sequence of characters in the input stream. The resulting FSM is shown in figure 4.
                </text>
                

            <image>
            <path>
            outputs/images/page_3_4.jpg
            </path>
            <description>
            A diagram showing a sequence or flowchart with various nodes connected by arrows. The first node is labeled 'start' and has an arrow pointing to it from outside, indicating its starting point in the process. From there, several paths branch out: one goes directly to another node marked as 'f', then continues on through multiple other nodes including 'fo', 'for', 'fl', 'flo', 'floa', and finally ends at a node labeled 'float'. Each connection between these nodes is represented by an arrow indicating the direction of flow. The diagram also includes labels such as 'o' (possibly representing some kind of operation or action), 'l', 'r', 'a', and 't', which may denote specific steps, conditions, or variables in this process.
            </description>
            </image>
            

                <caption>
                # Figure 4: The text recogniser


    Figure  4: The text recogniser

                </caption>
                

                <text>
                In the FSM there are states named after the partially-recongised words: f, fo, fl, flo, and floa. There are also two _accepting_ states named _for_ and float, shown on the diagram as double-circled states. It is obvious that for each state, there are many possible input characters that will not be recognised. For example in state fo, the machine will not recognise the character x, because there is no transition labelled with the event x, from state fo. If an unrecognised event occurs, the machine “dies”, and ceases to process symbols — it no longer has a current state. Effectively, the dot has been lost.
                </text>
                

                <text>
                Diagrams of this kind often result from describing the behavior of a _regular expression_, a topic we will deal with later.
                </text>
                

                <title>
                0.5 Central concepts

                </title>
                

                <text>
                There are a number of basic concepts that are central to the study of finite automata. These concepts are _alphabet_ (a set of symbols), _string_ (a list of symbols from an alphabet), and _language_ (a set of strings from the same alphabet).
                </text>
                
