
            <title>
            Chapter 3
            </title>
            

            <title>
            Epsilon-NFAs
            </title>
            

            <text>
            There is an extension that can be made to NNs, that improves expressiveness, but does not add any fundamentally new capabilities. The idea of the extension is to allow an NFA to make a transition from one state to another _without_ the need for an input symbol. We can think of this as _a transition caused by the empty string_, ϵ, which is why it is called an _ϵ-transition_.

An ϵ-NFA has the same capabilities as a standard NFA, because the class of languages that can be processed remains the same.


            </text>
            

            <title>
            # 3.1 An informal view


    



    

            </title>
            

            <text>
            We begin with an example: a signed integer is a string of characters. The first character can be a an optional + or - sign, which is then followed by a sequence of decimal digits. Some examples of valid signed integers are: 12, -5, +163, and 9. Some illegal values are: 34A, -, -368-, 3+, and 3+4.

Fig. 3.1 shows an ϵ-NPA, named intRecog, that can recognise a valid signed integer.


            </text>
            

        <image>
        <path>
        outputs/automata/images/chapter_2/page_0_5.jpg
        </path>
        <description>
        A diagram showing a finite state machine with three states: q0, q1, and q2. The transitions between these states are represented by arrows labeled with probabilities or constants (e.g., 0..9 for an epsilon transition). There is also an arrow from the initial state q0 to q1 with a probability of -c divided by c, indicating some form of input or action that causes this transition.
        </description>
        </image>
        

            <caption>
            # Figure 3.1: The intRecog ϵ-NFA
            </caption>
            

            <text>
            The diagram is very similar to the NFAs we studied previously, except it has two transitions labelled with ι. If the machine is in state q_0, it is permitted to make an ι-transition to state q_1, without requiring an input symbol. Similarly, if the machine is in state q_2, it can transition to state q_3 without requiring an input symbol.

The input alphabet for this NFAs is Σ={+,-,0,1,2…9}. (Notice that the alphabet does _not_ include ι.) The set of states is Q={q_0,q_1,q_2,q_3}. The initial state-set is Q_0={q_0}, and the set of accepting states is F={q_3}
            </text>
            

            <title>
            
# 3.1.1   Example - the intRecog ϵ-NFA processing a string

.

            </title>
            

            <text>
            # Suppose we wish to recognise the string "+14".

            </text>
            
