
            <title>
            # 3.9   Lazy/Greedy evaluation


    



    

            </title>
            

            <text>
            The procedures we have so far described for eliminating ϵ-transitions can be described as _lazy evolution_ – the machine does not evaluate an ϵ-transition until a real symbol arrives and needs to be processed.

There is an alternative view: whenever we have an opportunity to execute an ϵ-transition, the machine could immediately take it. This approach is known as _greedy evaluation_.

If we'reffledence between the two approaches is quite small – it depends on when the ϵ-closure operation is performed.

With _lazy_ evaluation, we have seen that we perform the ϵ-closure operation _before_ performing the Δ(s,s) step to process a symbol s. Lazy evaluation requires us too do a final ϵ-closure operation before deciding whether the machine has reached an accepting state.

However, the machine, the order of operations is reversed: after performing the Δ(q,s) step to process a symbol s, the machine executes an ϵ-closure operation, to "tush ahead". Greedy evaluation requires us to perform an ϵ-closure operation at the _beginning_, to "tush ahead" after the machine has been initialised.


            </text>
            

            <title>
            

## 3.10 Converting the intRecog ϵ-NFAto a NFA by greedy evaluation
            </title>
            

            <title>
            3.10.1 Compute ε-closures
            </title>
            

                <table>
                
<headers>
    ['state', 'ε-closure']
</headers>
<rows>
        <row>['q0', '{q0, q1}']</row>
	<row>['q1', '{q1}']</row>
	<row>['q2', '{q2, q3}']</row>
	<row>['q3', '{q3}']</row>
</rows>
        
                </table>
                

            <text>
            # We begin by computing the ϵ-closure, eclose, of each state, since we will need this information several times:
            </text>
            

            <title>
            # 3.10.2   Compute the starting state-set.


            </title>
            

            <text>
            # The start-states of the NFA will be the ϵ-closure of the start-states of the ϵ-NFA:

. 
            </text>
            

            <formula>
            
    Q_0N = E C L O S E(Q_0E) = E C L O S E({q_0}) = e c l o s e(q_0) = {q_0, q_1}

            </formula>
            

            <title>
            # 3.10.3   Compute the transition function


    



    

            </title>
            

            <text>
            We now derive the transition function for _each_ state and _each_ input symbol.


            </text>
            
