









Finite Automata
    
    
===============





§ INTRODUCTION

A finite state machine has one or more states, represented on a state-diagram as circles. As a result of an external event, the FSM can make a transition from one state to another (possibly the same) state. A transition is represented on the diagram as a directed arc, labelled with the name of the event that causes the transition to be taken. The FSM has an initial state, represented on the diagram by a lightning-trike. The current state is represented by a large dot inside the state.



§ ANOTHER EXAMPLE - TEXT RECOGNITION

We consider here another example, that arises in text-processing programs, such as a compiler. Suppose we wish to recognise the words "for", and float" in a stream of text. We could construct a finite state machine with the following transitions:

[         f         o         r;       𝐟_0 start for     𝐟 𝐥 𝐨;         o         a         t;     𝐟 𝐥 𝐨   𝐟 𝐥 𝐨 𝐚;           ]

Figure 4: The text recogniser

In the FSM there are states named after the partially-recognised words: f, f o, f l, f l o, and floa. There are also two accepting states named f o r and f l o a t, shown on the diagram as double-circled states. It is obvious that for each state, there are many possible input characters that will not be recognised. For example in state f o, the machine will not recognise the character x, because there is no transition labelled with the event x , from state f o . If an unrecognised event occurs, the machine "dies", and ceases to process symbols – it no longer has a current state. Effectively, the dot has been lost.

Diagrams of this kind often result from describing the behaviour of a regular expression, a topic we will deal with later.



§ CENTRAL CONCEPTS

There are a number of basic concepts that are central to the study of finite automata. These concepts are:
- Alphabet (a set of symbols)
- String (a list of symbols from an alphabet)
- Language (a set of strings from the same alphabet)

